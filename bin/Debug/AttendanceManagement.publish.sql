/*
Deployment script for Attendance

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Attendance"
:setvar DefaultFilePrefix "Attendance"
:setvar DefaultDataPath "D:\softwares\ProgramFiles\Microsoft SQL Server\MSSQL16.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "D:\softwares\ProgramFiles\Microsoft SQL Server\MSSQL16.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
/*
The column AddressTypeID on table [dbo].[Address] must be changed from NULL to NOT NULL. If the table contains data, the ALTER script may not work. To avoid this issue, you must add values to this column for all rows or mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column EmployeeID on table [dbo].[Address] must be changed from NULL to NOT NULL. If the table contains data, the ALTER script may not work. To avoid this issue, you must add values to this column for all rows or mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The type for column isActive in table [dbo].[Address] is currently  NCHAR (10) NOT NULL but is being changed to  BIT NULL. Data loss could occur and deployment may fail if the column contains data that is incompatible with type  BIT NULL.
*/

IF EXISTS (select top 1 1 from [dbo].[Address])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column AddressType on table [dbo].[AddressType] must be changed from NULL to NOT NULL. If the table contains data, the ALTER script may not work. To avoid this issue, you must add values to this column for all rows or mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The type for column AddressType in table [dbo].[AddressType] is currently  NVARCHAR (50) NULL but is being changed to  NVARCHAR (20) NOT NULL. Data loss could occur and deployment may fail if the column contains data that is incompatible with type  NVARCHAR (20) NOT NULL.

The type for column ID in table [dbo].[AddressType] is currently  NCHAR (10) NOT NULL but is being changed to  INT NOT NULL. Data loss could occur and deployment may fail if the column contains data that is incompatible with type  INT NOT NULL.
*/

IF EXISTS (select top 1 1 from [dbo].[AddressType])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column DepartmentID on table [dbo].[Attendance] must be changed from NULL to NOT NULL. If the table contains data, the ALTER script may not work. To avoid this issue, you must add values to this column for all rows or mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column EmployeeID on table [dbo].[Attendance] must be changed from NULL to NOT NULL. If the table contains data, the ALTER script may not work. To avoid this issue, you must add values to this column for all rows or mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column ID on table [dbo].[Attendance] must be changed from NULL to NOT NULL. If the table contains data, the ALTER script may not work. To avoid this issue, you must add values to this column for all rows or mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[Attendance])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column FirstName on table [dbo].[Employee] must be changed from NULL to NOT NULL. If the table contains data, the ALTER script may not work. To avoid this issue, you must add values to this column for all rows or mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[Employee])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Rename refactoring operation with key 270d7bd5-dd44-4f01-b505-f94917927274 is skipped, element [dbo].[Employee].[Id] (SqlSimpleColumn) will not be renamed to FirstName';


GO
PRINT N'Rename refactoring operation with key 2375b7ad-1f56-4840-9fa9-487e090ce766 is skipped, element [dbo].[Address].[Id] (SqlSimpleColumn) will not be renamed to AddressID';


GO
PRINT N'Starting rebuilding table [dbo].[Address]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Address] (
    [AddressID]     INT           NOT NULL,
    [Address]       NVARCHAR (50) NULL,
    [City]          NVARCHAR (50) NULL,
    [State]         NVARCHAR (50) NULL,
    [Country]       NVARCHAR (50) NULL,
    [Pincode]       NVARCHAR (50) NULL,
    [Landmark]      NVARCHAR (50) NULL,
    [AddressTypeID] NVARCHAR (50) NOT NULL,
    [EmployeeID]    NVARCHAR (50) NOT NULL,
    [isActive]      BIT           NULL,
    PRIMARY KEY CLUSTERED ([AddressID] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Address])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_Address] ([AddressID], [Address], [City], [State], [Country], [Pincode], [Landmark], [AddressTypeID], [EmployeeID], [isActive])
        SELECT   [AddressID],
                 [Address],
                 [City],
                 [State],
                 [Country],
                 [Pincode],
                 [Landmark],
                 [AddressTypeID],
                 [EmployeeID],
                 [isActive]
        FROM     [dbo].[Address]
        ORDER BY [AddressID] ASC;
    END

DROP TABLE [dbo].[Address];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Address]', N'Address';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[AddressType]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_AddressType] (
    [ID]          INT           NOT NULL,
    [AddressType] NVARCHAR (20) NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[AddressType])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_AddressType] ([ID], [AddressType])
        SELECT   [ID],
                 [AddressType]
        FROM     [dbo].[AddressType]
        ORDER BY [ID] ASC;
    END

DROP TABLE [dbo].[AddressType];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_AddressType]', N'AddressType';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Altering Table [dbo].[Attendance]...';


GO
ALTER TABLE [dbo].[Attendance] ALTER COLUMN [DepartmentID] INT NOT NULL;

ALTER TABLE [dbo].[Attendance] ALTER COLUMN [EmployeeID] INT NOT NULL;

ALTER TABLE [dbo].[Attendance] ALTER COLUMN [ID] INT NOT NULL;

ALTER TABLE [dbo].[Attendance] ALTER COLUMN [Status] NVARCHAR (50) NULL;


GO
PRINT N'Creating Primary Key unnamed constraint on [dbo].[Attendance]...';


GO
ALTER TABLE [dbo].[Attendance]
    ADD PRIMARY KEY CLUSTERED ([ID] ASC);


GO
PRINT N'Starting rebuilding table [dbo].[Employee]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Employee] (
    [FirstName]    NVARCHAR (50) NOT NULL,
    [MiddlenName]  NVARCHAR (50) NULL,
    [LastName]     NVARCHAR (50) NULL,
    [DOB]          DATE          NULL,
    [MobileNumber] NVARCHAR (10) NULL,
    [Email]        NVARCHAR (50) NULL,
    [EmployeeID]   NVARCHAR (50) NOT NULL,
    [DepartmentID] NVARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([EmployeeID] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Employee])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_Employee] ([EmployeeID], [FirstName], [MiddlenName], [LastName], [DOB], [MobileNumber], [Email], [DepartmentID])
        SELECT   [EmployeeID],
                 [FirstName],
                 [MiddlenName],
                 [LastName],
                 [DOB],
                 [MobileNumber],
                 [Email],
                 [DepartmentID]
        FROM     [dbo].[Employee]
        ORDER BY [EmployeeID] ASC;
    END

DROP TABLE [dbo].[Employee];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Employee]', N'Employee';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Table [dbo].[EmployeeAddress]...';


GO
CREATE TABLE [dbo].[EmployeeAddress] (
    [Id]         INT NOT NULL,
    [EmployeeID] INT NOT NULL,
    [AddressID]  INT NOT NULL,
    [isActive]   BIT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c93f6f09-2c77-4024-a4b7-ca9ef86b5439')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c93f6f09-2c77-4024-a4b7-ca9ef86b5439')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '270d7bd5-dd44-4f01-b505-f94917927274')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('270d7bd5-dd44-4f01-b505-f94917927274')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '6f8c4090-2862-4dbb-a69f-893297634134')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('6f8c4090-2862-4dbb-a69f-893297634134')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '65d694a9-778e-4b6f-8b8f-599dd8652cff')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('65d694a9-778e-4b6f-8b8f-599dd8652cff')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '2375b7ad-1f56-4840-9fa9-487e090ce766')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('2375b7ad-1f56-4840-9fa9-487e090ce766')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '584ce0b4-0379-4d4c-8239-60b3eca97373')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('584ce0b4-0379-4d4c-8239-60b3eca97373')

GO

GO
PRINT N'Update complete.';


GO
